-*- markdown -*-
# Humm and Strumm Engine Installation Instructions
To the extent possible under law, the people who associated CC0 with
this file have waived all copyright and related or neighboring rights
to this file.

_This guide assumes you are using the command line CMake tool and a
make-style build tool (GNU make, BSD make, or Microsoft nmake)._

Once you've downloaded a release tarball from our website or cloned
from our git repository, you can use the following guide to build and
install the engine.

## Prerequisites

In order to build the engine, you will need:

  * A C++11 compiler. We test the engine on MSVC 2013, GCC 4.8.2,
    Clang 3.3, and Clang 3.4. Any other compiler that supports C++11
    fully enough should work as well.
  * CMake 2.8 or later Build System
  * Eigen 3 Linear Algebra Library
  * Boost 1.33.0 or later Portable C++ Libraries
  * Intel TBB 4.2

To build and run unit tests, you will also need:

  * cipra 1.x Unit Testing Framework

To build API documentation, you will need:

  * Doxygen 1.8.2 or later
  * LaTeX (optional)

## Quickstart

The following series of commands will build and install the engine,
assuming your current working directory is the root of the source
tree.

### With make

    $ cd build/
    $ cmake -DCMAKE_INSTALL_PREFIX=/path/to/install/in/ ..
    $ make
    $ make test # to run unit tests (optional)
    $ sudo make install

### With nmake

    $ CD build/
    $ cmake -DCMAKE_INSTALL_PREFIX=/path/to/install/in -G"NMake Makefiles" ..
    $ nmake
    $ nmake test REM to run unit tests (optional)
    $ make install

## Makefile targets

  * `all` (default): Builds the engine, and accompanying unit tests if
    `WITH_UNIT_TESTS` is enabled.
  * `test`: Runs the unit tests after they have been built if
    `WITH_UNIT_TESTS` is enabled.
  * `doc`: Builds the doxygen documentation.
  * `cppcheck`: Runs cppcheck on the source code.
  * `install`: Installs the engine to your system.
  * `uninstall`: Uninstalls the engine from your system.  Due to the
    way CMake works, we may leave a few empty directories behind.

## Optional Flags

When running the `cmake` command above, you can add additional flags
to the command line that will configure how the engine is built.  We
support the following flags to cmake:

  * `WITH_UNIT_TESTS` (default = `ON`): Builds the accompanying unit
    tests and allows you to run them.  Turn them off if you don't want
    to install cipra.
  * `WITH_CPPCHECK` (default = `OFF`): Adds a target `cppcheck` that
    allows you to run our source code through the cppcheck tool.
  * `CMAKE_INSTALL_PREFIX` (default is system dependent): Specifies
    the path to install the engine to.
  * `CMAKE_BUILD_TYPE` (default = `RelWithDebInfo`): Controls what
    compiler flags will be used when building the engine. One of
    `Debug`, `Release`, `RelWithDebInfo`, `MinSizeRel`.

To use one of these flags, add the string `-Dflagname=value` to the
`cmake` command when you run it.
